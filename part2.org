

* Common Lisp -- MOP Tutorial (Part 2)

  In the previous post we looked at how to list the slots of a class.
  We also talked a bit about the difference in terminology, both with
  CLOS and also with MOP.  In particular the way that slots are a
  rough equivelence of properties.  In this post, we'll talk about
  methods and the way they differ from traditional OOP and also take a
  look at how to list the methods of an object using MOP.

** TODO ~Google: Common Lisp "MOP" how to list the methods of a an object~

   Methods in CLOS are concieved of somewhat differently than in most
   contemporary object oriented languages.  In some respects they take
   the center stage, rather than objects -- Norvig, in another classic
   Lisp book from about the time of The Art of the Metaobject
   Protocol, Paradigms of Artificial Inteligence programming (PAIP),
   devotes a section of his object oriented chapter asking the
   question: Is Close Object Oriented?  One of the sets of answers he
   writes in response to the question is that: 

   #+BEGIN_QUOTE
     CLOS is more general than an object-oriented system because it
     allows for methods that specialize on more than one argument. In
     true object-oriented systems, methods are associated with objects
     of a particular class. This association is lexically obvious (and
     the message-passing metaphor is clear) when we write the methods
     inside the definition of the class, as in our define-class
     macro. The message-passing metaphor is still apparent when we
     write generic functions that dispatch on the class of their first
     argument, which is how we've been using CLOS so far.

     But CLOS methods can dispatch on the class of any required
     argument, or any combination of them. Consider ... (a) definition of
     conc, which is like append except that it works for vectors as
     well as lists. Rather than writing conc using conditional
     statements, we can use the multimethod dispatch capabilities of
     CLOS to define the four cases: (1) the first argument is nil, (2)
     the second argument is nil, (3) both arguments are lists, and (4)
     both arguments are vectors. Notice that if one of the arguments
     is nil there will be two applicable methods, but the method for
     ni1 will be used because the class nil is more specific than
     the class 1ist.
   #+END_QUOTE

   Making the dispatch on type more explicit, all methods are
   associated with a generic function of the same.  If you create a
   method without declaring a generic function one will automatically
   be created for you.  Therefor methods are a specialization of the
   generic function based on the declared class of the arguments. The
   MOP method ~specializer-direct-generic-functions~ can be used to
   get a list of all direct generic functions that are specialized on
   that class.  Using the very simple class we defined in the previous
   post, we'll add a simple minded method, ~move-point~, 

   #+BEGIN_SRC lisp  :tangle class-direct-slots.lisp
     (defclass point ()
       ((x :initarg :x :accessor x :initform 0)
        (y :initarg :y :accessor y :initform 0)))

     (defparameter *point* (make-instance 'point))

     (defmethod move-point ((point point) translation)
       (setf (x point) (nth 0 translation))
       (setf (y point) (nth 1 translation)))
   #+END_SRC

   using ~*point*~, by evaluating, 

   #+BEGIN_SRC lisp  :tangle class-direct-slots.lisp
     (sb-mop:specializer-direct-generic-functions (class-of *point*))
   #+END_SRC

   gives us the list, 

   #+BEGIN_SRC lisp  :tangle class-direct-slots.lisp
     (#<STANDARD-GENERIC-FUNCTION COMMON-LISP-USER::MOVE-POINT (1)>
      #<STANDARD-GENERIC-FUNCTION (COMMON-LISP:SETF COMMON-LISP-USER::Y) (1)>
      #<STANDARD-GENERIC-FUNCTION COMMON-LISP-USER::Y (1)>
      #<STANDARD-GENERIC-FUNCTION (COMMON-LISP:SETF COMMON-LISP-USER::X) (1)>
      #<STANDARD-GENERIC-FUNCTION COMMON-LISP-USER::X (1)>)
   #+END_SRC

   This list contains the slot getters and setters as well as the
   method we defined for the class.  Since we already have a way to
   get the slots, lets get just a list of methods.  To do this we'll
   take the routine that we developed in the previous post and turn it
   into a function that can take any argument.


   #+BEGIN_SRC lisp  :tangle class-direct-slots.lisp
     (defun print-slots (object)
       (let (result)
         (dolist  (slot (sb-mop:class-direct-slots (class-of object)) result)
           (push (sb-mop:slot-definition-name slot) result))))
   #+END_SRC


(defun print-slots (object)
  (let (result)
  (dolist  (slot (sb-mop:class-direct-slots (class-of object)) result)
    (push (sb-mop:slot-definition-name slot) result))))



(defun print-methods (object)
  (let ((result '())
	(accessors (print-slots object)))
    (dolist (f (sb-mop:specializer-direct-generic-functions
		(find-class (type-of object)))
	     result)
      (let* ((function-name-or-setf (sb-mop:generic-function-name f))
	     (function-name (if (listp function-name-or-setf)
				(cadr function-name-or-setf)
				function-name-or-setf)))
	(unless (member  function-name accessors)
	  (push function-name result))))))
